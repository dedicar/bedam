trigger:
  branches:
    include:
      - main
      - master
      - dev
      - pre-release

pool:
  name: 'xyz-runner'

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '8.0.x'
  artifactName: 'drop'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test .NET 8 Project'
    pool:
      name: 'xyz-runner'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) -nowarn:CS0618'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -nowarn:CS0618'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: $(artifactName)

# Parallel deployment stage for all environments
- stage: Deploy
  displayName: 'Parallel Deployments'
  dependsOn: Build
  jobs:
    # Dev deployment (only on dev branch)
    - deployment: DeployFunctionAppDev
      displayName: 'Deploy Azure Function App - Dev'
      environment: 'dev'
      pool:
        name: 'xyz-runner'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: $(artifactName)

            # Federated Azure login with permission grant
            - task: AzureCLI@2
              displayName: 'Federated Azure Login & Permission Grant (Dev)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionDev)'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az account show
                  # Grant federated identity permission to the Function App's managed identity
                  az functionapp identity assign --name "$(functionAppNameDev)" --resource-group "$(functionAppResourceGroupDev)"
                  # Assign 'Contributor' role to the managed identity for the resource group
                  principalId=$(az functionapp identity show --name "$(functionAppNameDev)" --resource-group "$(functionAppResourceGroupDev)" --query principalId -o tsv)
                  az role assignment create --assignee $principalId --role "Contributor" --scope "/subscriptions/$(azureSubscriptionIdDev)/resourceGroups/$(functionAppResourceGroupDev)"

            - task: AzureFunctionApp@2
              displayName: 'Deploy Azure Function App - Dev (Obsolete Type Enabled)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionDev)'
                appType: 'functionApp'
                appName: '$(functionAppNameDev)'
                package: '$(Pipeline.Workspace)/$(artifactName)/**/*.zip'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

            # Health check after deployment
            - task: PowerShell@2
              displayName: 'Health Check - Dev'
              name: HealthCheckDev
              inputs:
                targetType: 'inline'
                script: |
                  $url = "$(functionAppHealthUrlDev)"
                  Write-Host "Checking health at $url"
                  try {
                    $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
                    if ($response.StatusCode -eq 200) {
                      Write-Host "Health check passed."
                      exit 0
                    } else {
                      Write-Error "Health check failed with status code $($response.StatusCode)"
                      exit 1
                    }
                  } catch {
                    Write-Error "Health check failed: $_"
                    exit 1
                  }

            # Rollback if health check fails
            - task: AzureFunctionApp@2
              displayName: 'Rollback to Previous Successful Deployment - Dev'
              condition: failed('HealthCheckDev')
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionDev)'
                appType: 'functionApp'
                appName: '$(functionAppNameDev)'
                package: '$(previousSuccessfulArtifactPathDev)'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

    # Test deployment (only on pre-release branch)
    - deployment: DeployFunctionAppTest
      displayName: 'Deploy Azure Function App - Test'
      environment: 'test'
      pool:
        name: 'xyz-runner'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'pre-release'))
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: $(artifactName)

            # Federated Azure login with permission grant
            - task: AzureCLI@2
              displayName: 'Federated Azure Login & Permission Grant (Test)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionTest)'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az account show
                  az functionapp identity assign --name "$(functionAppNameTest)" --resource-group "$(functionAppResourceGroupTest)"
                  principalId=$(az functionapp identity show --name "$(functionAppNameTest)" --resource-group "$(functionAppResourceGroupTest)" --query principalId -o tsv)
                  az role assignment create --assignee $principalId --role "Contributor" --scope "/subscriptions/$(azureSubscriptionIdTest)/resourceGroups/$(functionAppResourceGroupTest)"

            - task: AzureFunctionApp@2
              displayName: 'Deploy Azure Function App - Test (Obsolete Type Enabled)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionTest)'
                appType: 'functionApp'
                appName: '$(functionAppNameTest)'
                package: '$(Pipeline.Workspace)/$(artifactName)/**/*.zip'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

            # Health check after deployment
            - task: PowerShell@2
              displayName: 'Health Check - Test'
              name: HealthCheckTest
              inputs:
                targetType: 'inline'
                script: |
                  $url = "$(functionAppHealthUrlTest)"
                  Write-Host "Checking health at $url"
                  try {
                    $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
                    if ($response.StatusCode -eq 200) {
                      Write-Host "Health check passed."
                      exit 0
                    } else {
                      Write-Error "Health check failed with status code $($response.StatusCode)"
                      exit 1
                    }
                  } catch {
                    Write-Error "Health check failed: $_"
                    exit 1
                  }

            # Rollback if health check fails
            - task: AzureFunctionApp@2
              displayName: 'Rollback to Previous Successful Deployment - Test'
              condition: failed('HealthCheckTest')
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionTest)'
                appType: 'functionApp'
                appName: '$(functionAppNameTest)'
                package: '$(previousSuccessfulArtifactPathTest)'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

    # Stage deployment (only on pre-release branch)
    - deployment: DeployFunctionAppStage
      displayName: 'Deploy Azure Function App - Stage'
      environment: 'stage'
      pool:
        name: 'xyz-runner'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'pre-release'))
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: $(artifactName)

            # Federated Azure login with permission grant
            - task: AzureCLI@2
              displayName: 'Federated Azure Login & Permission Grant (Stage)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionStage)'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az account show
                  az functionapp identity assign --name "$(functionAppNameStage)" --resource-group "$(functionAppResourceGroupStage)"
                  principalId=$(az functionapp identity show --name "$(functionAppNameStage)" --resource-group "$(functionAppResourceGroupStage)" --query principalId -o tsv)
                  az role assignment create --assignee $principalId --role "Contributor" --scope "/subscriptions/$(azureSubscriptionIdStage)/resourceGroups/$(functionAppResourceGroupStage)"

            - task: AzureFunctionApp@2
              displayName: 'Deploy Azure Function App - Stage (Obsolete Type Enabled)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionStage)'
                appType: 'functionApp'
                appName: '$(functionAppNameStage)'
                package: '$(Pipeline.Workspace)/$(artifactName)/**/*.zip'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

            # Health check after deployment
            - task: PowerShell@2
              displayName: 'Health Check - Stage'
              name: HealthCheckStage
              inputs:
                targetType: 'inline'
                script: |
                  $url = "$(functionAppHealthUrlStage)"
                  Write-Host "Checking health at $url"
                  try {
                    $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
                    if ($response.StatusCode -eq 200) {
                      Write-Host "Health check passed."
                      exit 0
                    } else {
                      Write-Error "Health check failed with status code $($response.StatusCode)"
                      exit 1
                    }
                  } catch {
                    Write-Error "Health check failed: $_"
                    exit 1
                  }

            # Rollback if health check fails
            - task: AzureFunctionApp@2
              displayName: 'Rollback to Previous Successful Deployment - Stage'
              condition: failed('HealthCheckStage')
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionStage)'
                appType: 'functionApp'
                appName: '$(functionAppNameStage)'
                package: '$(previousSuccessfulArtifactPathStage)'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

    # Prod deployment (only on pre-release branch, with approval)
    - deployment: DeployFunctionAppProd
      displayName: 'Deploy Azure Function App - Prod'
      environment:
        name: 'production'
        # Approvals must be set in the Azure DevOps environment UI for 'production'
        # with user1@domain.com, user2@domain.com, user3@domain.com as approvers and 3 hour timeout
      pool:
        name: 'xyz-runner'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'pre-release'))
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ManualValidation@0
              timeoutInMinutes: 180
              displayName: 'Await Production Approval (3 hours timeout)'
              inputs:
                notifyUsers: |
                  user1@domain.com
                  user2@domain.com
                  user3@domain.com
                instructions: 'Please approve production deployment. If not approved within 3 hours, deployment will be cancelled.'
                onTimeout: 'reject'

            - download: current
              artifact: $(artifactName)

            # Federated Azure login with permission grant
            - task: AzureCLI@2
              displayName: 'Federated Azure Login & Permission Grant (Prod)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionProd)'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az account show
                  az functionapp identity assign --name "$(functionAppNameProd)" --resource-group "$(functionAppResourceGroupProd)"
                  principalId=$(az functionapp identity show --name "$(functionAppNameProd)" --resource-group "$(functionAppResourceGroupProd)" --query principalId -o tsv)
                  az role assignment create --assignee $principalId --role "Contributor" --scope "/subscriptions/$(azureSubscriptionIdProd)/resourceGroups/$(functionAppResourceGroupProd)"

            - task: AzureFunctionApp@2
              displayName: 'Deploy Azure Function App - Prod (Obsolete Type Enabled)'
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionProd)'
                appType: 'functionApp'
                appName: '$(functionAppNameProd)'
                package: '$(Pipeline.Workspace)/$(artifactName)/**/*.zip'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'

            # Health check after deployment
            - task: PowerShell@2
              displayName: 'Health Check - Prod'
              name: HealthCheckProd
              inputs:
                targetType: 'inline'
                script: |
                  $url = "$(functionAppHealthUrlProd)"
                  Write-Host "Checking health at $url"
                  try {
                    $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
                    if ($response.StatusCode -eq 200) {
                      Write-Host "Health check passed."
                      exit 0
                    } else {
                      Write-Error "Health check failed with status code $($response.StatusCode)"
                      exit 1
                    }
                  } catch {
                    Write-Error "Health check failed: $_"
                    exit 1
                  }

            # Rollback if health check fails
            - task: AzureFunctionApp@2
              displayName: 'Rollback to Previous Successful Deployment - Prod'
              condition: failed('HealthCheckProd')
              inputs:
                azureSubscription: '$(azureFederatedServiceConnectionProd)'
                appType: 'functionApp'
                appName: '$(functionAppNameProd)'
                package: '$(previousSuccessfulArtifactPathProd)'
                deploymentMethod: 'auto'
                additionalArguments: '-nowarn:CS0618'










